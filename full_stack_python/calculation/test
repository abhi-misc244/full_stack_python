import reflex as rx 
import reflex_local_auth
from ..ui.base import base_page
from ..project.state import ProjectState
from .state import CsvState
from reflex_ag_grid import ag_grid
import pandas as pd
#from .state import LoadState

#from . import forms

@reflex_local_auth.require_login
def maxdemand_page() -> rx.Component:

    # Sample DataFrame
    data = {
        'equip_id': ['M001', 'M002', 'M003'],
        'desc': ['Motor No 1', 'Motor No 2', 'Motor No 3'],
        'power_kW': ['5', '10', '15'],
        'pf': ['.8', '.8', '.8'],
        'eff': ['.9', '.9', '.9']
    }
    df = pd.DataFrame(data)

    # Convert DataFrame to list of dictionaries
    data_list = df.to_dict('records')

    



    page_title = "Calculate Maximum Demand of " + ProjectState.project.title
    my_child = rx.vstack(
        rx.heading(page_title, size="9"),
        rx.desktop_only(            
            rx.box(
                rx.table.root(
                    rx.table.header(
                        rx.table.row(
                            rx.table.column_header_cell("Equipment ID"),
                            rx.table.column_header_cell("Description"),
                            rx.table.column_header_cell("Power (kW)"),
                            rx.table.column_header_cell("Power Factor (Lag)"),
                            rx.table.column_header_cell("Eff"),
                        ),
                    ),
                    rx.table.body(
                        create_table_rows(data_list),  # Call the function to generate rows
                    ),
                ),
                width='50vw',
            ),
        ),
        rx.tablet_only(
            rx.box(
                rx.table.root(
                    rx.table.header(
                        rx.table.row(
                            rx.table.column_header_cell("Equipment ID"),
                            rx.table.column_header_cell("Description"),
                            rx.table.column_header_cell("Power (kW)"),
                            rx.table.column_header_cell("Power Factor (Lag)"),
                            rx.table.column_header_cell("Eff"),
                        ),
                    ),
                    rx.table.body(
                        create_table_rows(data_list),  # Call the function to generate rows
                    ),
                ),
                width='75vw',
            ),
        ),
        rx.mobile_only(
            rx.box(
                rx.table.root(
                    rx.table.header(
                        rx.table.row(
                            rx.table.column_header_cell("Equipment ID"),
                            rx.table.column_header_cell("Description"),
                            rx.table.column_header_cell("Power (kW)"),
                            rx.table.column_header_cell("Power Factor (Lag)"),
                            rx.table.column_header_cell("Eff"),
                        ),
                    ),
                    rx.table.body(
                        create_table_rows(data_list),  # Call the function to generate rows
                    ),
                ),
                width='95vw',
            ),
        ),
        spacing="5",
        align="center",
        min_height="95vh",
    )
    return base_page(my_child)

def create_table_rows(data_list):
    rows = []
    for row_data in data_list:
        row = rx.table.row(
            rx.table.cell(rx.text(row_data['equip_id'])),
            rx.table.cell(rx.text(row_data['desc'])),
            rx.table.cell(rx.text(row_data['power_kW'])),
            rx.table.cell(rx.text(row_data['pf'])),
            rx.table.cell(rx.text(row_data['eff'])),
        )
        rows.append(row)
    return rows





